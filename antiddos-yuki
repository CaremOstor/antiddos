#!/usr/bin/env bash
# Script written to protect Linux servers.

# For best results, install fail2ban and any IPS.
# Enjoy! Made by yuki with love <3.

# ------------------------
# Configuration
# ------------------------

# ipt-nft, ip6t-nft, ipset, nft
IP="/sbin/iptables-nft"
IP6="/sbin/ip6tables-nft"
IPS="/sbin/ipset"
NFT="/sbin/nft"

# SSH Port.
# Ignore this if you don't use SSH.
# Default: 22 (ssh)
SSH="22"

# All ports of running webservers.
# Ignore this if you don't have them.
# Default: 80
HTTP="80"

# Ports protected by SYNPROXY.
SYNPROXY="22,80,443"

# Connection limit (per one IP)
# Recommended: 100 connections
CL="100"

# Connection limit action
# Recommended: DROP
CLA="DROP"

# UserAgent block action
# Recommended: DROP
# You should use WAF if you're under attack
# Or if you're using HTTPS+HSTS
UBA="DROP"

# Proto block action
# Recommended: DROP
PBA="DROP"

# IP Block action
# Recommended: DROP
# No need to change it without reason.
IBA="DROP"

# SYN PPS limit (per IP)
# Recommended: 5/s
SPL="5/s"

# ACK PPS limit (per IP)
# Recommended: 2500/s
APL="2500/s"

# SYN-ACK PPS limit (per IP)
# Recommended: 1000/s
SAPL="1000/s"

# ACK-PSH PPS limit (per IP)
# Recommended: 1000/s
APPL="1000/s"

# UDP PPS limit (per IP)
# Recommended: 5000/s
UPL="5000/s"

# Color
BYellow="\033[1;33m"
BRed="\033[1;31m"

# --------------------------------

# RootCheck
if [ "$(whoami)" != "root" ]; then
	echo -e "${BRed}[!] Run this script as root."
	tput sgr0
	exit 255
fi

# --------------------------------

# Flush all rules.
"$NFT" flush ruleset
"$NFT" add table filter

# Delete the "blacklist" ip set.
"$IPS" destroy blacklist

# Backup sysctl.conf.
# It's located in /etc.
cp /etc/sysctl.conf{,.backup}

# --------------------------------

# Set input default policy to DROP.
# Drop policy swiftly deals with any unwanted traffic.
"$IP" -P INPUT DROP

# Allow the local interface.
"$IP" -A INPUT -i lo -s 127.0.0.1 -j ACCEPT

# Allow established and related connections.
"$IP" -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Allow SSH.
"$IP" -A INPUT -p tcp --dport "$SSH" -j ACCEPT

# --------------------------------
# Firewall ruleset.

# Limit SYN/SYN-ACK/ACK/ACK-PSH PPS to mitigate SYN/SYN-ACK/ACK/ACK-PSH floods.
# ----------------------------------------------------------------
"$IP" -t raw -A PREROUTING -p tcp --syn --match hashlimit --hashlimit-above "$SPL" --hashlimit-mode srcip --hashlimit-name synflood -m comment --comment "SYN LIMIT" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK ACK --match hashlimit --hashlimit-above "$APL" --hashlimit-mode srcip --hashlimit-burst 2 --hashlimit-name ackflood -m comment --comment "ACK LIMIT"j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags SYN,ACK SYN,ACK --match hashlimit --hashlimit-above "$SAPL" --hashlimit-mode srcip --hashlimit-burst 2 --hashlimit-name synackflood -m comment --comment "SYNACK LIMIT"-j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,PSH ACK,PSH --match hashlimit --hashlimit-above "$APPL" --hashlimit-mode srcip --hashlimit-burst 2 --hashlimit-name ackpshflood -m comment --comment "ACKPSH LIMIT" -j DROP

# Limit UDP PPS to mitigate UDP Floods.
# ----------------------------------------------------------------
"$IP" -t raw -A PREROUTING -p udp -m limit --limit "$UPL" -m comment --comment "UDP" -j ACCEPT
"$IP" -t raw -A PREROUTING -p udp -m comment "UDP LIMIT" -j DROP

# Block some types of ICMP and allow only limited ICMP.
# ----------------------------------------------------------------
"$IP" -t raw -A PREROUTING -p icmp --icmp-type echo-request -m length --length 1:100 -m comment --comment "PING" -j ACCEPT
"$IP" -t raw -A PREROUTING -p icmp -m limit --limit 2/s --limit-burst 2 -j ACCEPT
"$IP" -t raw -A PREROUTING -p icmp --icmp-type address-mask-request -j DROP
"$IP" -t raw -A PREROUTING -p icmp --icmp-type router-solicitation -j DROP
"$IP" -t raw -A PREROUTING -p icmp --icmp-type timestamp-request -j DROP
"$IP" -t raw -A PREROUTING -p icmp --icmp-type redirect -j DROP

# Limit outgoing ICMP "Port-Unreach" PPS to offload server in case of UDP Flood.
# ----------------------------------------------------------------
"$IP" -t raw -A OUTPUT -p icmp --icmp-type port-unreach -m limit --limit 7/m --limit-burst 2 -j ACCEPT
"$IP" -t raw -A OUTPUT -p icmp --icmp-type port-unreach -j DROP

# Block TCP packets with invalid tcp flags combination to increase security and block simple attacks.
# ----------------------------------------------------------------
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -m comment --comment "INVALID TCP FLAGS" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags RST,PSH,URG RST,PSH,URG -m comment --comment "INVALID TCP FLAGS" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -m comment --comment "INVALID TCP FLAGS" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m comment --comment "INVALID TCP FLAGS" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -m comment --comment "INVALID TCP FLAGS" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -m comment --comment "INVALID TCP FLAGS" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags SYN,FIN SYN,FIN -m comment --comment "INVALID TCP FLAGS" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -m comment --comment "INVALID TCP FLAGS" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -m comment --comment "INVALID TCP FLAGS" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,URG URG -m comment --comment "INVALID TCP FLAGS" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -m comment --comment "INVALID TCP FLAGS" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -m comment --comment "INVALID TCP FLAGS" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL NONE -m comment --comment "INVALID TCP FLAGS" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL ALL -m comment --comment "INVALID TCP FLAGS" -j DROP

# Limit DNS/NTP PPS to offload CPU during AMP DDoS attacks with these protocols.
# Additionally, drop some other protocols which could be used in amplified attacks.
# ----------------------------------------------------------------
"$IP" -t raw -A PREROUTING -p udp --sport 123 -m limit --limit 3/m --limit-burst 1 -j ACCEPT
"$IP" -t raw -A PREROUTING -p udp --sport 53 -m limit --limit 4/s --limit-burst 4 -j ACCEPT
"$IP" -t raw -A PREROUTING -p udp -m multiport --sports 19,53,111,123,137,1900,2140,3702,5353,7001,9000,17185,37020,37810 -m comment "AMPLIFICATION" -j DROP

# Drop TCP/UDP packets with invalid length to mitigate some attacks.
# ----------------------------------------------------------------
"$IP" -t raw -A PREROUTING -p tcp -m length --length 0 -m comment --comment "INVALID LENGTH" -j DROP
"$IP" -t raw -A PREROUTING -p udp -m length --length 0:8 -m comment --comment "INVALID LENGTH" -j DROP

# Limit connections per IP to mitigate impact from Handshake and Slowloris.
# ----------------------------------------------------------------
"$IP" -t mangle -A PREROUTING -p tcp -m connlimit --connlimit-above "$CL" -m comment --comment "CONNECTION LIMIT" -j "$CLA"

# Limit TCP FIN/RST packets per second (PPS) to mitigate some attacks.
# ----------------------------------------------------------------
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags FIN FIN -m limit --limit 2/s --limit-burst 2 -j ACCEPT
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags RST RST -m comment --comment "RST LIMIT" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags FIN FIN -m comment --comment "FIN LIMIT" -j DROP

# Protect webserver(s) against HTTP Flood & SYN Flood.
# Note: Consider removing these rules if you're using a proxy/CDN.
# --------------------------------
"$IP" -t mangle -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m state --state NEW -m recent --set
"$IP" -t mangle -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m state --state NEW -m recent --update --seconds 60 --hitcount 200 -m comment --comment "HTTP PROTECTION" -j DROP

# Redirect suspicious packets to SYNPROXY.
# Mitigates SYN Floods and some sophiscated TCP attacks.
# --------------------------------
"$IP" -t mangle -A INPUT -p tcp -m multiport --dports "$SYNPROXY" -m conntrack --ctstate INVALID,UNTRACKED -j SYNPROXY --timestamp --sack-perm

# Drop all invalid packets.
# Try it, if no problems - you can use it.
# This rule gives you INSANE protection.
# --------------------------------
# "$IP" -t mangle -I PREROUTING -p all -m state --state INVALID -m comment --comment "INVALID PACKET BLOCK" -j DROP

# Drop UDP/TCP packets with invalid src-port to mitigate some attacks.
# --------------------------------
"$IP" -t raw -I PREROUTING -p udp ! --sport 1:65535 -m comment --comment "UDP INVALID SPORT" -j DROP
"$IP" -t raw -I PREROUTING -p tcp ! --sport 1:65535 -m comment --comment "TCP INVALID SPORT" -j DROP

# Drop SYNs with src-port <1024 to prevent many attack types.
# --------------------------------
"$IP" -t raw -I PREROUTING -p tcp --syn ! --sport 1024:65535 -m comment --comment "SYN INVALID SPORT" -j DROP

# Drop fragmented packets to mitigate IP fragmentation attacks.
# If you need fragmented packets, you can drop only invalid:
# iptables -t raw -I PREROUTING -m frag --fragfirst -m comment --comment "MALFORMED FRAG DROP" -j DROP
# --------------------------------
"$IP" -t raw -I PREROUTING -f -m comment --comment "FRAG DROP" -j DROP

# Drop new not-SYN TCP Packets to mitigate popular TCP attacks.
# --------------------------------
"$IP" -t mangle -I PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -m comment --comment "NEW TCP NOT SYN DROP" -j DROP

# Drop TCPs with invalid MSS to mitigate some attack types.
# --------------------------------
"$IP" -t mangle -I PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:63000 -m comment --comment "INVALID MSS" -j DROP

# Drop HTTP Requests with suspicious useragents to increase security.
# --------------------------------
"$IP" -A INPUT -p tcp -m multiport --dports "$HTTP" -m string --string 'WordPress' --algo kmp -j "$UBA"
"$IP" -A INPUT -p tcp -m multiport --dports "$HTTP" -m string --string 'benchmark' --algo kmp -j "$UBA"
"$IP" -A INPUT -p tcp -m multiport --dports "$HTTP" -m string --string 'MD5(' --algo kmp -j "$UBA"
"$IP" -A INPUT -p tcp -m multiport --dports "$HTTP" -m string --string 'censys' --algo kmp -j "$UBA"
"$IP" -A INPUT -p tcp -m multiport --dports "$HTTP" -m string --string 'inspect' --algo kmp -j "$UBA"
"$IP" -A INPUT -p tcp -m multiport --dports "$HTTP" -m string --string 'scanner' --algo kmp -j "$UBA"
"$IP" -A INPUT -p tcp -m multiport --dports "$HTTP" -m string --string 'shodan' --algo kmp -j "$UBA"

# Drop popular signature of SNMP-based attacks to mitigate them.
# --------------------------------
"$IP" -t raw -A PREROUTING -p udp --sport 161 -m length --length 2536:1244 -j DROP

# Block some Layer3 Protocols to mitigate ESP/GRE/Ah floods.
# If you need these protocols - delete rules below.
# --------------------------------
"$IP" -t raw -A PREROUTING -p esp -j "$PBA"
"$IP" -t raw -A PREROUTING -p gre -j "$PBA"
"$IP" -t raw -A PREROUTING -p ah -j "$PBA"

# Drop IPv4 packets with SSR option to block some spoof types.
# --------------------------------
"$IP" -t raw -A PREROUTING -m ipv4options --ssrr -j DROP
"$IP" -t raw -A PREROUTING -m hl --hl-eq 1 -j DROP

# Drop packets received on TEST-NET IP.
# --------------------------------
"$IP" -t raw -A PREROUTING -p all -s 192.0.2.0/24 -j DROP

# Limit SYN/ICMPv6 PPS to mitigate some IPv6 attacks.
# They're not currently not popular.
# ----------------------------------------------------------------
"$IP6" -t raw -A PREROUTING -p icmpv6 -m limit --limit 4/s -j ACCEPT
"$IP6" -t raw -A PREROUTING -p icmpv6 -j DROP
"$IP6" -t raw -A PREROUTING -p tcp --syn -m limit --limit 10/s --limit-burst 4 -j ACCEPT
"$IP6" -t raw -A PREROUTING -p tcp --syn -j DROP

# Block some multicast IPs, censys IPs, shodan IPs...
# We use big hashsize, so it doesn't affects performance.
# --------------------------------
"$IPS" create blacklist nethash hashsize 260000
"$IPS" add blacklist 240.0.0.0/4
"$IPS" add blacklsit 224.0.0.0/4
"$IPS" add blacklist 162.142.125.0/24
"$IPS" add blacklist 167.94.138.0/24
"$IPS" add blacklist 198.20.69.0/24
"$IPS" add blacklist 198.20.70.114
"$IPS" add blacklist 93.120.27.62
"$IPS" add blacklist 66.240.236.119
"$IPS" add blacklist 66.240.205.34
"$IPS" add blacklist 198.20.99.130
"$IPS" add blacklist 71.6.135.131
"$IPS" add blacklist 66.240.192.138
"$IPS" add blacklist 71.6.167.142
"$IPS" add blacklist 82.221.105.0/24
"$IPS" add blacklist 71.6.165.200
"$IPS" add blacklist 188.138.9.50
"$IPS" add blacklist 85.25.103.50
"$IPS" add blacklist 85.25.43.94
"$IPS" add blacklist 71.6.146.185
"$IPS" add blacklist 71.6.158.166
"$IPS" add blacklist 198.20.87.98
"$IPS" add blacklist 185.163.109.66
"$IPS" add blacklist 94.102.49.0/24
"$IPS" add blacklist 104.131.0.69
"$IPS" add blacklist 104.236.198.48
"$IPS" add blacklist 155.94.222.0/24
"$IPS" add blacklist 155.94.254.0/24
"$IPS" add blacklist 162.142.125.0/24
"$IPS" add blacklist 167.94.138.0/24
"$IPS" add blacklist 167.94.145.0/24
"$IPS" add blacklist 167.94.146.0/24
"$IPS" add blacklist 167.248.133.0/24
"$IPS" add blacklist 2602:80d:1000:b0cc:e::/32
"$IPS" add blacklist 2620:96:e000:b0cc:e::/32
"$IP" -t raw -A PREROUTING -m set --match-set blacklist src -j "$IBA"

# Advanced FireWall rules.
# They're patch sophisticated attacks.

# Patch random rare attack.
# --------------------------------
"$IP" -t raw -A PREROUTING -p udp -m length --length 100:140 -m string --string "nAFS" --algo kmp --to 65535 -j DROP

# Patch UDPMIX method.
# --------------------------------
"$IP" -t mangle -A PREROUTING -p udp --dport 27043 -m state --state NEW -m recent --set
"$IP" -t mangle -A PREROUTING -p udp --dport 27043 -m state --state NEW -m recent --update --seconds 1 --hitcount 2 -j DROP

# Patch "Stacheldraht" malware.
# --------------------------------
"$IP" -t raw -A PREROUTING -p tcp --sport 16660 -j DROP

# Block one of leaked OVH Bypass payload.
# --------------------------------
"$IP" -t raw -A PREROUTING -m string --algo bm --string "\x77\x47\x5E\x27\x7A\x4E\x09\xF7\xC7\xC0\xE6" -j DROP

# Block some exposed payloads.
# --------------------------------
"$IP" -t raw -A PREROUTING -p tcp -m length --length 40 -m string --algo bm --string "0xd3da" -m state --state ESTABLISHED -j DROP
"$IP" -t raw -A PREROUTING -p tcp -m length --length 40 -m string --algo bm --string "0x912e" -m state --state ESTABLISHED -j DROP
"$IP" -t raw -A PREROUTING -p tcp -m length --length 40 -m string --algo bm --string "0x0c54" -m state --state ESTABLISHED -j DROP
"$IP" -t raw -A PREROUTING -p tcp -m length --length 40 -m string --algo bm --string "0x38d3" -m state --state ESTABLISHED -j DROP

# Block signatures of some popular C2 sources.
# --------------------------------
"$IP" -t raw -A PREROUTING -p udp -m u32 --u32 "2&0xFFFF=0x2:0x0100" -j DROP
"$IP" -t raw -A PREROUTING -p udp -m u32 --u32 "12&0xFFFFFF00=0xC0A80F00" -j DROP
"$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK ACK -m length --length 52 -m string --algo bm --string "0x912e" -m state --state ESTABLISHED -j DROP

# Block suspicious strings to mitigate impact of some attacks.
# --------------------------------
"$IP" -t raw -A PREROUTING -m string --algo bm --string "CRI" -j DROP
"$IP" -t raw -A PREROUTING -m string --algo bm --string "ddos" -j DROP
"$IP" -t raw -A PREROUTING -m string --algo bm --string "flood" -j DROP
"$IP" -t raw -A PREROUTING -m string --algo bm --string "HACKED" -j DROP

# Block exposed payloads of NULL method.
# --------------------------------
"$IP" -t raw -A PREROUTING -m string --algo bm --string "0x00000" -j DROP
"$IP" -t raw -A PREROUTING -m string --algo bm --string "0x000000000001" -j DROP

# Block NTP Reflection packets.
# --------------------------------
"$IP" -t raw -A PREROUTING -p udp -m u32 --u32 "0>>22&0x3C@8&0xFF" -j DROP

# Patch SYNOPT-ACK Method.
# --------------------------------
"$IP" -t raw -A PREROUTING -p tcp --sport 21 --dport 21 --tcp-flags SYN,ACK SYN,ACK -j DROP

# Block known bypasses by their patterns.
# --------------------------------
"$IP" -t raw -A PREROUTING -p udp -m multiport --dports 16000:29000,"$SSH" -m string --to 75 --algo bm --string 'HTTP/1.1 200 OK' -j DROP
"$IP" -t raw -A PREROUTING -p udp --dport 16000:29000 -m string --to 75 --algo bm --string 'HTTP/1.1 200 OK' -j DROP
"$IP" -t raw -A PREROUTING -p udp -m udp -m string --hex-string "|7374640000000000|" --algo kmp --from 28 --to 29 -j DROP
"$IP" -t raw -A PREROUTING -p udp -m u32 --u32 "6&0xFF=0,2:5,7:16,18:255" -j DROP
"$IP" -t raw -A PREROUTING -m u32 --u32 "12&0xFFFF=0xFFFF" -j DROP
"$IP" -t raw -A PREROUTING -m u32 --u32 "28&0x00000FF0=0xFEDFFFFF" -j DROP
"$IP" -t raw -A PREROUTING -m string --algo bm --from 28 --to 29 --string "farewell" -j DROP
"$IP" -t raw -A PREROUTING -p udp -m udp -m string --hex-string "|53414d50|" --algo kmp --from 28 --to 29 -j DROP

# If you've added port-allowing rules
# Into the script, you can uncomment two rules below
# To enable logging to dmesg.
# This logging is ratelimited to 5 msg per second.
# "$IP" -A INPUT -m limit --limit 5/m j LOG --log-prefix "[yuki-script] DROP:" --log-ip-options --log-tcp-options --log-tcp-sequence
# "$IP" -A INPUT -j DROP

# Sysctl.conf tweaks
# --------------------------------

echo -e "
#
# /etc/sysctl.conf - Configuration file for setting system variables
# See /etc/sysctl.d/ for additional system variables.
# See sysctl.conf (5) for information.
#

#kernel.domainname = example.com

#
# Tweaks by https://github.com/yuk1c/antiddos
#


# Set custom Netfilter CT timeouts.
# Helps in TCP DDoS mitigation.
# --------------------------------
 net.netfilter.nf_conntrack_tcp_timeout_last_ack = 10
 net.netfilter.nf_conntrack_tcp_timeout_close = 5
 net.netfilter.nf_conntrack_tcp_timeout_close_wait = 5
 net.netfilter.nf_conntrack_tcp_timeout_time_wait = 5
 net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 20
 net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 20
 net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 25
 net.netfilter.nf_conntrack_tcp_timeout_unacknowledged = 20
 net.netfilter.nf_conntrack_generic_timeout = 300
 net.netfilter.nf_conntrack_udp_timeout = 10
 net.netfilter.nf_conntrack_icmp_timeout = 2
 net.netfilter.nf_conntrack_icmpv6_timeout = 3

# Enable SYN-Cookies.
# Helps in SYN Flood DDoS mitigation.
# --------------------------------
 net.ipv4.tcp_syncookies = 1

# Set custom SYN/SYN-ACK retries count.
# Helps in TCP DDoS mitigation.
# --------------------------------
 net.ipv4.tcp_synack_retries = 1
 net.ipv4.tcp_syn_retries = 2

# Set custom NIC Buffers size.
# --------------------------------
 net.core.rmem_max = 33554432
 net.core.wmem_max = 33554432

# Use TCP MTU Probing when the kernel detects ICMP BH.
# --------------------------------
 net.ipv4.tcp_mtu_probing = 1

# Set a large route table size (for IPv4 & IPv6).
# --------------------------------
 net.ipv6.route.max_size = 2147483647
 net.ipv4.route.max_size = 2147483647

# Network security hardening.
# --------------------------------
 net.ipv4.conf.all.accept_redirects = 0
 net.ipv4.conf.all.secure_redirects = 0
 net.ipv4.conf.all.send_redirects = 0
 net.ipv4.conf.all.accept_source_route = 0
 net.ipv6.conf.all.accept_source_route = 0
 net.ipv6.conf.all.accept_ra = 0
 net.ipv4.conf.all.secure_redirects = 1
 net.ipv6.conf.all.drop_unsolicited_na = 1
 net.ipv6.conf.all.use_tempaddr = 2
 net.ipv4.conf.all.drop_unicast_in_l2_multicast = 1
 net.ipv6.conf.all.drop_unicast_in_l2_multicast = 1
 net.ipv6.conf.default.dad_transmits = 0
 net.ipv6.conf.default.autoconf = 0
 #net.ipv4.ip_forward = 0 # Disables ip_forward (blocks VPN/NAT)
 #net.ipv4.ip_no_pmtu_disc = 3 # Hardened PMTU Discover Mode (usually not needed)

# Prevent ARP Spoofing.
# --------------------------------
 net.ipv4.conf.all.drop_gratuitous_arp = 1
 net.ipv4.conf.all.arp_ignore = 1
 net.ipv4.conf.all.arp_filter = 1

# Disable IGMP Multicast reports.
# --------------------------------
 net.ipv4.igmp_link_local_mcast_reports = 0

# Overall security hardening.
# --------------------------------
 kernel.dmesg_restrict = 1
 kernel.kptr_restrict = 1
 fs.protected_symlinks = 1
 fs.protected_hardlinks = 1
 fs.protected_fifos = 2
 fs.protected_regular = 2
 kernel.unprivileged_bpf_disabled = 1
 kernel.unprivileged_userns_clone = 0
 kernel.printk = 3 3 3 3
 net.core.bpf_jit_harden = 2
 net.netfilter.nf_conntrack_helper = 0
 vm.unprivileged_userfaultfd = 0
 kernel.kexec_load_disabled = 1
 #kernel.sysrq = 0 # Disables sysrq (not recommended)

# Performance tuning.
# Set somaxconn to 2000000 if you have very powerful server.
# Your server will be able to handle 2 mil connections. 0_0
# Disabled checksum verification in NF because the NIC usually already calculates checksums.
# --------------------------------
 kernel.sched_tunable_scaling = 1
 kernel.shmmax = 268435456
 net.ipv4.tcp_tw_reuse = 1
 vm.swappiness = 20
 net.core.somaxconn = 32000
 net.ipv4.tcp_keepalive_probes = 5
 net.netfilter.nf_conntrack_checksum = 0

# Set max conntrack table size.
# --------------------------------
 net.nf_conntrack_max = 20971520
 net.netfilter.nf_conntrack_max = 20971520

# Enable ExecShield to block some remote attacks.
# --------------------------------
 kernel.exec-shield = 2

# Don't log bogus ICMP responses.
# --------------------------------
 net.ipv4.icmp_ignore_bogus_error_responses = 1

# Disable conntrack helper.
# --------------------------------
 net.netfilter.nf_conntrack_helper = 0

# Allow to use more ports as a s-ports.
# --------------------------------
 net.ipv4.ip_local_port_range=1024 65535

# Disable conntrack TCP Loose (we need this to use SYN Proxy).
# --------------------------------
 net.netfilter.nf_conntrack_tcp_loose = 0

# Reverse-path filter.
# You should set '1' to '2' if you're using an assymetric routing.
# --------------------------------
 net.ipv4.conf.all.rp_filter = 1

# Custom ratelimit for invalid TCP packets.
# --------------------------------
net.ipv4.tcp_invalid_ratelimit = 1000" >/etc/sysctl.conf

sysctl -p
ipset save
systemctl enable --now netfilter-persistent
clear

echo -e "${BYellow}"
echo -e "[✓] Script changes applied, but rules aren't saved.
Check the network now, and if it's fine - save the rules using 'sudo netfilter-persistent save'.\n"
echo -e "\nDrop policy blocks everything that isnt allowed."
echo -e "Allow needed TCP port with 'iptables-nft -A INPUT -p tcp --dport PORT -j ACCEPT'"
echo -e "For UDP port you can use 'iptables-nft -A INPUT -p udp --dport PORT -j ACCEPT'"
echo -e "Also you can check stats: 'iptables-nft -L -n -v'"

# Reset terminal color and exit.
tput sgr0
exit 0

# Wanna delete rule? Replace -A (or -I) with -D and apply!
